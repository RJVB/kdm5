
dnl this is for kdm:

KDE_CONFDIR=`eval echo $kde_confdir`
AC_DEFINE_UNQUOTED(KDE_CONFDIR, "$KDE_CONFDIR", [KDE's configuration directory])
AC_SUBST(KDE_CONFDIR)
KDE_BINDIR=`eval echo $kde_bindir`
AC_DEFINE_UNQUOTED(KDE_BINDIR, "$KDE_BINDIR", [KDE's binaries directory])
AC_SUBST(KDE_BINDIR)

KDE_FIND_PATH(X, X_SERVER)
if test -n "$X_SERVER"; then
    XBINDIR=`echo $X_SERVER | sed -e 's#/X$##'`
else
    KDE_FIND_PATH(xrdb, XRDB)
    if test -n "$XRDB"; then
        XBINDIR=`echo $XRDB | sed -e 's#/xrdb$##'`
    fi
fi

if test "x$XBINDIR" = x; then
  AC_MSG_ERROR([X binaries not found. Please make sure they are in PATH!])
else
  AC_DEFINE_UNQUOTED(XBINDIR, "$XBINDIR", [Define where to find the X binaries])
fi
AC_SUBST(XBINDIR)

KDE_FIND_PATH(xmkmf, XMKMF, [], [AC_MSG_ERROR([xmkmf/imake not found. Please make sure it's in PATH!])])
AC_SUBST(XMKMF)

dnl ask imake about various X settings
AC_MSG_CHECKING([various X settings])
AC_CACHE_VAL(kde_cv_defines_imake,
[rm -fr conftestdir
if mkdir conftestdir; then
    cd conftestdir
    cat > Imakefile <<'EOF'
acimake:
#if HasXdmAuth
	@echo HASXDMAUTH=1
#endif
EOF
    $XMKMF >&5 2>&1
    if test -f Makefile; then
changequote(, )
	kde_cv_defines_imake=`${MAKE-make} acimake 2> /dev/null | grep '^[^ ]*='`
changequote([, ])
	kde_cv_defines_imake=`echo $kde_cv_defines_imake`
    else
	AC_MSG_ERROR([$XMKF (imake) failed])
    fi
    cd ..
    rm -fr conftestdir
else
    AC_MSG_ERROR([mkdir failed])
fi])
if test -n "$kde_cv_defines_imake"; then
    eval $kde_cv_defines_imake
    AC_MSG_RESULT([done])
fi

AC_MSG_CHECKING([whether to use xdm authorization])
if test -n "$HASXDMAUTH"; then
    AC_MSG_RESULT([yes])
    AC_DEFINE(HASXDMAUTH, 1, [Use the different XDM authorization schemes])
else
    AC_MSG_RESULT([no])
fi

dnl XXX still used in chooser and konsole
AC_REQUIRE([KDE_MISC_TESTS])
AC_CHECK_LIB(util, main, [LIBUTIL="-lutil"]) dnl for FreeBSD
AC_SUBST(LIBUTIL)
AC_CHECK_LIB(s, main, [LIB_LIBS="-ls"]) dnl for AIX
AC_SUBST(LIB_LIBS)

AC_CHECK_LIB(Xau, main, [:], 
	[
	  AC_MSG_WARN([Cannot build KDM! Make sure that libXau.a is installed!])
	  DO_NOT_COMPILE="$DO_NOT_COMPILE kdm"
	], 
	  $X_LDFLAGS -lX11 $LIBSOCKET)

AC_ARG_WITH(xdmcp,
	[  --without-xdmcp         build kdm without xdmcp support [default=with xdmcp]],
	[ if test "$withval" = yes; then
	    XDMCP=1
	  else
	    XDMCP=
	  fi
	], [XDMCP=1])
if test -n "$XDMCP"; then
  kdmchooserdir=chooser
  AC_CHECK_LIB(Xdmcp, main, [LIBXDMCP="-lXdmcp"], , $X_LDFLAGS -lX11 $LIBSOCKET)
  if test -n "$LIBXDMCP"; then
    ac_cpp_safe=$ac_cpp
    ac_cpp='$CXXCPP $CPPFLAGS $X_INCLUDES'
    AC_CHECK_HEADER(X11/Xdmcp.h, [HAVE_X11_XDMCP_H=1])
    ac_cpp=$ac_cpp_safe
  fi
  if test -z "$HAVE_X11_XDMCP_H"; then
    AC_MSG_WARN([Cannot build KDM! Make sure that libXdmcp.a and Xdmcp.h 
are installed or use --without-xdmcp to disable XDMCP support!])
    DO_NOT_COMPILE="$DO_NOT_COMPILE kdm"
  fi
else
  IMAKEFLAGS="-DNOXDMCP"
fi
AC_SUBST(LIBXDMCP)	dnl XXX phase out
AC_SUBST(kdmchooserdir)	dnl XXX phase out

AC_MSG_CHECKING(whether to use Kerberos v4)
AC_ARG_WITH(krb4,
[  --with-krb4[=PATH]      Compile in Kerberos v4 support.],
[ case "$withval" in
  yes)
    with_krb4=/usr/kerberos
    ;;
  esac ],
[ with_krb4=no ]
)
case "$with_krb4" in
no)
  AC_MSG_RESULT(no)
  IMAKEFLAGS="$IMAKEFLAGS -DUSEKRB4=0"
  ;;
*)
  AC_MSG_RESULT(yes)
  IMAKEFLAGS="$IMAKEFLAGS -DUSEKRB4=1"
  AC_DEFINE_UNQUOTED(KRB4, 1, [ define if you have Kerberos IV ])
  KERBEROS_ROOT="$with_krb4"
  KERBEROS_INCS="-I${KERBEROS_ROOT}/include"
  KERBEROS_LIBS="-L${KERBEROS_ROOT}/lib -lkrb -ldes"
  KRB_RPATH=
  if test "$USE_RPATH" = "yes" ; then
    KRB_RPATH="-R ${KERBEROS_ROOT}/lib"
  fi
  AC_CHECK_LIB(resolv, dn_expand, KERBEROS_LIBS="$KERBEROS_LIBS -lresolv")
  dnl Check whether or not the AFS lifetime conversion routines exist.
  AC_MSG_CHECKING(whether AFS lifetime conversion routines are present)
  keeplibs="$LIBS"
  keepcflags="$CFLAGS"
  LIBS="-L${KERBEROS_ROOT}/lib -lkrb -ldes $LIBS"
  CFLAGS="-I${KERBEROS_ROOT}/include $CFLAGS"
  AC_TRY_LINK([#include <krb.h>], [ krb_life_to_time(10, 10);],
              [AC_MSG_RESULT(yes)
               AC_DEFINE_UNQUOTED(HAVE_KRB_LIFE_TO_TIME, 1, 
	         [ define if libkrb has krb_life_to_time() ])],
              [AC_MSG_RESULT(no)])
  LIBS="$keeplibs"
  CFLAGS="$keepcflags"
  ;;
esac

AC_MSG_CHECKING(whether to use AFS)
AC_ARG_WITH(afs,
  [  --with-afs              Compile in AFS support (requires KTH krb4).], , 
  [ with_afs=no ])
if test "$with_afs" = no; then
  AC_MSG_RESULT(no)
  IMAKEFLAGS="$IMAKEFLAGS -DNOAFS"
else
  if test "$with_krb4" = no; then
    AC_MSG_RESULT(no)
    AC_MSG_WARN("AFS requires Kerberos v4 support.")
  else
    AC_MSG_RESULT(yes)
    AC_DEFINE_UNQUOTED(AFS, 1, [ define if you have KTH Kerberos IV and AFS ])
    KERBEROS_LIBS="${KERBEROS_LIBS} -lkafs"
    if test -n "$os_aix"; then
      KERBEROS_LIBS="${KERBEROS_LIBS} -lld"
    fi
  fi
fi

AC_SUBST(KERBEROS_ROOT)dnl
AC_SUBST(KERBEROS_INCS)dnl
AC_SUBST(KERBEROS_LIBS)dnl
AC_SUBST(KRB_RPATH)

if test "$with_krb4" != "no"; then
    IMAKEFLAGS="$IMAKEFLAGS -DKrbIVLibraries=\"$KERBEROS_LIBS\""
fi

if test "$kde_use_debug_code" = "yes"; then
    IMAKEFLAGS="$IMAKEFLAGS -DDEBUG"
fi

if test "$use_pam" = "yes"; then
    IMAKEFLAGS="$IMAKEFLAGS -DUSEPAM=1 -DPAMLIBS=\"$PAMLIBS\" -DUSESHADOW=0"
elif test "$use_shadow" = "yes"; then
    IMAKEFLAGS="$IMAKEFLAGS -DUSEPAM=0 -DUSESHADOW=1"
else
    IMAKEFLAGS="$IMAKEFLAGS -DUSEPAM=0 -DUSESHADOW=0"
fi

AC_SUBST(IMAKEFLAGS)

dnl AC_OUTPUT(kdm/kfrontend/config/kdmrc)
dnl AC_OUTPUT(kdm/kfrontend/config/Xservers)
dnl AC_OUTPUT(kdm/kfrontend/config/Xstartup)
dnl AC_OUTPUT(kdm/kfrontend/config/Xreset)
