
dnl this is for kdm:

KDE_EXPAND_MAKEVAR(KDE_CONFDIR, kde_confdir)
AC_DEFINE_UNQUOTED(KDE_CONFDIR, "$KDE_CONFDIR", [KDE's configuration directory])
KDE_EXPAND_MAKEVAR(KDE_DATADIR, kde_datadir)
AC_DEFINE_UNQUOTED(KDE_DATADIR, "$KDE_DATADIR", [KDE's static data directory])
KDE_EXPAND_MAKEVAR(KDE_BINDIR, kde_bindir)
AC_DEFINE_UNQUOTED(KDE_BINDIR, "$KDE_BINDIR", [KDE's binaries directory])
AC_SUBST(KDE_BINDIR)

KDE_FIND_PATH(xmkmf, XMKMF, [], [AC_MSG_ERROR([xmkmf/imake not found. Please make sure it's in PATH!])])

dnl ask imake about various X settings
AC_MSG_CHECKING([various X settings])
imkv=3
test "$kde_cv_defines_imake_version" = $imkv || unset kde_cv_defines_imake
AC_CACHE_VAL(kde_cv_defines_imake, [
  rm -fr conftestdir
  if mkdir conftestdir; then
    cd conftestdir
    cat > Imakefile <<'EOF'[
BASIC_FLAGS = StandardDefines ConnectionFlags

#if HasXdmAuth
XDMAUTH_DEFINES = -DHASXDMAUTH
#endif

#if HasBSD44Sockets
SOCK_DEFINES = -DBSD44SOCKETS
#endif

#if defined(i386Architecture) || defined(AmigaArchitecture)
FRAGILE_DEFINES = -DFRAGILE_DEV_MEM
#endif

#ifdef RandomDefines
RANDOM_DEFINES = RandomDefines
#elif defined(OpenBSDArchitecture)
RANDOM_DEFINES = -DARC4_RANDOM
#elif defined(LinuxArchitecture)
RANDOM_DEFINES = -DDEV_RANDOM=\"/dev/urandom\"
#elif defined(NetBSDArchitecture) && \
  ((OSMajorVersion > 1) || \
   (OSMajorVersion == 1 && OSMinorVersion > 3))
RANDOM_DEFINES = -DDEV_RANDOM=\"/dev/urandom\"
#endif

#if HasMkstemp
MKTMP_DEFINES = -DHAS_MKSTEMP
#endif

#if HasLibCrypt && !defined(SpecialLibCrypt) && defined(LynxOSArchitecture)
CRYPT_DEFINES = -DHAS_CRYPT
#endif

#if HasGetIfAddrs
IFADDRS_DEFINES = -DHAS_GETIFADDRS
#endif

VERSION_DEFINES = -DOSMAJORVERSION=OSMajorVersion -DOSMINORVERSION=OSMinorVersion

XDM_CFLAGS = $(BASIC_FLAGS) $(VERSION_DEFINES) $(SIGNAL_DEFINES) $(XDMAUTH_DEFINES) $(FRAGILE_DEFINES) $(SOCK_DEFINES) $(RANDOM_DEFINES) $(CRYPT_DEFINES) $(MKTMP_DEFINES) $(IFADDRS_DEFINES)

acimake:
	@set crap $(XDM_CFLAGS); shift; se="s,\\([ 	\`\"'\\\\]\\),\\\\\\1,g"; for i in "$$@"; do echo "$$i" | sed "$$se"; done | tr '\n' ' ' | sed "s, \$$,,;$$se;s,^,XDM_CFLAGS=,"; echo
#if HasXdmAuth
	@echo HASXDMAUTH=1
#endif
	@echo XBINDIR=$(BINDIR)
	@echo XLIBDIR=$(LIBDIR)
#ifndef IPv6Flags
	@echo IPV6DEF=
#else
#if !IPv6SocketsAlsoIPv4 && !PreferXdmcpIPv6
	@echo IPV6DEF=
#else
	@echo IPV6DEF=IPv6Flags
#endif
#endif

]EOF
    if $XMKMF >&5 2>&1 && test -f Makefile; then
	[kde_cv_defines_imake=`${MAKE-make} acimake 2> /dev/null | grep '^[^ ]*=' | tr '\n' ' '`]
	kde_cv_defines_imake_version=$imkv
    else
        AC_MSG_RESULT([failed])
	AC_MSG_ERROR([$XMKMF (imake) failed.
Make sure you have all necessary X development packages installed.
On some systems a missing /lib/cpp symlink is at fault.])
    fi
    cd ..
    rm -fr conftestdir
  else
    AC_MSG_RESULT([failed])
    AC_MSG_ERROR([cannot create temporary directory])
  fi
])
AC_MSG_RESULT([done])
eval "$kde_cv_defines_imake"

AC_MSG_CHECKING([whether to use xdm authorization])
if test -n "$HASXDMAUTH"; then
    AC_MSG_RESULT([yes])
    AC_DEFINE(HASXDMAUTH, 1, [Use encrypted XDM authorization])
else
    AC_MSG_RESULT([no])
fi

AC_MSG_RESULT([checking for X binary directory... $XBINDIR])
AC_DEFINE_UNQUOTED(XBINDIR, "$XBINDIR", [Define where to find the X binaries])
AC_MSG_RESULT([checking for X library directory... $XLIBDIR])
AC_DEFINE_UNQUOTED(XLIBDIR, "$XLIBDIR", [Define where to find the X libraries])

AC_CHECK_LIB(Xau, main, [:], 
	[
	  AC_MSG_WARN([Cannot build KDM! Make sure that libXau.a is installed!])
	  DO_NOT_COMPILE="$DO_NOT_COMPILE kdm"
	], 
	  $X_LDFLAGS -lX11 $LIBSOCKET)

AC_ARG_WITH(xdmcp,
        AC_HELP_STRING([--without-xdmcp],[build kdm without xdmcp support [default=with xdmcp]]), ,
	[with_xdmcp=yes])
if test "x$with_xdmcp" = xyes; then
  AC_CHECK_LIB(Xdmcp, main, [LIBXDMCP="-lXdmcp"], , $X_LDFLAGS -lX11 $LIBSOCKET)
  if test -n "$LIBXDMCP"; then
    ac_cpp_safe=$ac_cpp
    ac_cpp='$CXXCPP $CPPFLAGS $X_INCLUDES'
    AC_CHECK_HEADER(X11/Xdmcp.h, [HAVE_X11_XDMCP_H=1], , [#include <X11/Xmd.h>])
    ac_cpp=$ac_cpp_safe
  fi
  if test -z "$HAVE_X11_XDMCP_H"; then
    AC_MSG_WARN([Cannot build KDM! Make sure that libXdmcp.a and Xdmcp.h 
are installed or use --without-xdmcp to disable XDMCP support!])
    DO_NOT_COMPILE="$DO_NOT_COMPILE kdm"
  fi
  XDMCP_DEFINE="-DXDMCP $IPV6DEF"
fi
AC_SUBST(LIBXDMCP)
AC_SUBST(XDMCP_DEFINE)

KRB4_INCS=
KRB4_LIBS=
KRB4_RPATH=

AC_MSG_CHECKING(whether to use Kerberos v4)
AC_ARG_WITH(krb4,
AC_HELP_STRING([--with-krb4=PATH],[Compile in Kerberos v4 support]),
[ test "x$with_krb4" = xyes && with_krb4=/usr/kerberos ],
[ with_krb4=no ]
)
case "$with_krb4" in
no)
  AC_MSG_RESULT(no)
  ;;
*)
  AC_MSG_RESULT(yes)
  AC_DEFINE_UNQUOTED(KRB4, 1, [define if you have Kerberos IV])
  KRB4_INCS="-I$with_krb4/include"
  KRB4_LIBS="-L$with_krb4/lib -lkrb -ldes"
  if test "$USE_RPATH" = "yes" ; then
    KRB4_RPATH="-R $with_krb4/lib"
  fi
  AC_CHECK_LIB(resolv, dn_expand, KRB4_LIBS="$KRB4_LIBS -lresolv")
  ;;
esac

AC_MSG_CHECKING(whether to use AFS)
AC_ARG_WITH(afs,
  AC_HELP_STRING([--with-afs],[Compile in AFS support (requires KTH krb4)]), , 
  [ with_afs=no ])
if test "$with_afs" = no; then
  AC_MSG_RESULT(no)
else
  if test "$with_krb4" = no; then
    AC_MSG_RESULT(no)
    AC_MSG_WARN("AFS requires Kerberos v4 support.")
    with_afs=no
  else
    AC_MSG_RESULT(yes)
    AC_DEFINE_UNQUOTED(AFS, 1, [define if you have KTH Kerberos IV and AFS])
    KRB4_LIBS="$KRB4_LIBS -lkafs"
    if test -n "$os_aix"; then
      KRB4_LIBS="$KRB4_LIBS -lld"
    fi
  fi
fi

AC_SUBST(KRB4_INCS)
AC_SUBST(KRB4_LIBS)
AC_SUBST(KRB4_RPATH)

AC_CHECK_LIB(s, main, [LIB_LIBS="-ls"]) dnl for AIX
AC_SUBST(LIB_LIBS)

KRB5_INCS=
KRB5_LIBS=
KRB5_RPATH=

AC_MSG_CHECKING([whether to use Kerberos5 for Xauth cookies in kdm])
AC_ARG_WITH(krb5auth,
  AC_HELP_STRING([--with-krb5auth=PATH],[Use Kerberos5 for Xauth cookies in kdm]), ,
  [ with_krb5auth=no ])
if test "x$with_krb5auth" = xno; then
  AC_MSG_RESULT(no)
else
  AC_MSG_RESULT(yes)
  if test "x$with_krb5auth" != xyes; then
    KRB5_INCS="-I$with_krb5auth/include"
    KRB5_LIBS="-L$with_krb5auth/lib"
    if test "$USE_RPATH" = "yes" ; then
      KRB5_RPATH="-R $with_krb5auth/lib"
    fi
  fi
  KRB5_LIBS="$KRB5_LIBS -lkrb5" dnl -lk5crypto -lcom_err -lresolv
  keepcflags=$CFLAGS
  CFLAGS="$KRB5_INCS $CFLAGS"
  AC_CHECK_HEADER(krb5/krb5.h, 
    [ XDM_CFLAGS="$XDM_CFLAGS -DK5AUTH" ],
    [ AC_MSG_ERROR([--with-krb5auth requires Kerberos5 header files.
Due to a problem with X includes you probably have to run "ln -s . krb5"
in the directory where the krb5.h include resides to make things actually work.])])
  CFLAGS="$keepcflags"
fi

AC_SUBST(KRB5_INCS)
AC_SUBST(KRB5_LIBS)
AC_SUBST(KRB5_RPATH)

AC_MSG_CHECKING([whether to use Sun's secure RPC for Xauth cookies in kdm])
AC_ARG_WITH(rpcauth,
  AC_HELP_STRING([--with-rpcauth],[Use Sun's secure RPC for Xauth cookies in kdm.]), , 
  [ with_rpcauth=no ])
if test "x$with_rpcauth" = xno; then
  AC_MSG_RESULT(no)
else
  AC_MSG_RESULT(yes)
  AC_CHECK_HEADER(rpc/rpc.h, 
    [ XDM_CFLAGS="$XDM_CFLAGS -DSECURE_RPC" ],
    [ AC_MSG_ERROR([--with-rpcauth requires Sun RPC header files.])])
fi

AC_CHECK_MEMBER([struct passwd.pw_expire], [ XDM_CFLAGS="$XDM_CFLAGS -DHAVE_PW_EXPIRE" ], , [#include <pwd.h>])

ac_save_libs=$LIBS
LIBS="$LIBS $LIBUTIL"
AC_CHECK_FUNC(setusercontext, [ XDM_CFLAGS="$XDM_CFLAGS -DHAS_SETUSERCONTEXT" ])
KDE_CHECK_FUNC_EXT(getusershell, [
#include <unistd.h>
], 
		[getusershell();],
	        [char *getusershell()],
		[GETUSERSHELL],
	[ XDM_CFLAGS="$XDM_CFLAGS -DHAVE_GETUSERSHELL" ])
AC_CHECK_FUNC(login_getclass, [ XDM_CFLAGS="$XDM_CFLAGS -DHAVE_LOGIN_GETCLASS" ])
AC_CHECK_FUNC(auth_timeok, [ XDM_CFLAGS="$XDM_CFLAGS -DHAVE_AUTH_TIMEOK" ])
LIBS=$ac_save_libs

AC_CHECK_FUNC(vsyslog, [ XDM_CFLAGS="$XDM_CFLAGS -DUSE_SYSLOG" ])
if test "x$use_pam" = xyes; then
    XDM_CFLAGS="$XDM_CFLAGS -DUSE_PAM"
elif test "x$use_shadow" = xyes; then
    XDM_CFLAGS="$XDM_CFLAGS -DUSESHADOW"
fi
if test "x$with_krb4" != xno; then
    XDM_CFLAGS="$XDM_CFLAGS -DKERBEROS"
    if test "x$with_afs" = xno; then
	XDM_CFLAGS="$XDM_CFLAGS -DNO_AFS"
    fi
fi
XDM_CFLAGS="$XDM_CFLAGS $(echo "$CFLAGS" | sed 's/ -D_XOPEN_SOURCE=[[0-9]]*//;s/ -D_BSD_SOURCE//;s/ -D_GNU_SOURCE//')"
AC_MSG_RESULT([xdm CFLAGS: $XDM_CFLAGS])
AC_SUBST(XDM_CFLAGS)

AC_ARG_WITH(kdm-xconsole,
	AC_HELP_STRING([--with-kdm-xconsole],[build kdm with built-in xconsole [default=no]]), ,
	[with_kdm_xconsole=no])
if test "x$with_kdm_xconsole" = xyes; then
    AC_DEFINE(WITH_KDM_XCONSOLE, 1, [Build kdm with built-in xconsole])
fi

dnl AC_OUTPUT(kdm/kfrontend/sessions/kde.desktop)
