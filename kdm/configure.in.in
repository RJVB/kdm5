dnl this is for kdm:

AC_CHECK_FUNCS(getsecretkey getloadavg)
dnl checks for X server

AC_PATH_PROG(X_SERVER, X)
if test ! -z "$X_SERVER"; then
    X_SERVER=`echo $X_SERVER | sed -e 's+/X$++'`
    AC_DEFINE_UNQUOTED(XBINDIR,$X_SERVER, [Define where to find the X server])
    XBINDIR=$X_SERVER
    AC_SUBST(XBINDIR)
fi

dnl This one tries to find XDMDIR for config files
AC_ARG_WITH(xdmdir,
	[  --with-xdmdir	          If the xdm config dir can't be found automaticly],
	[ ac_xdmdir=$withval],
	[ ac_xdmdir="no"])

AC_MSG_CHECKING([various X settings])
rm -fr conftestdir
if mkdir conftestdir; then
    cd conftestdir
    cat > Imakefile <<'EOF'
acimake:
	@echo XDMDIR="$(XDMDIR)"\;
	@echo CONN_FLAGS=^ConnectionFlags^\;
#if HasXdmAuth
	@echo HASXDMAUTH=1\;
#endif
#if defined(i386Architecture) || defined(AmigaArchitecture)
	@echo FRAGILE_DEV_MEM=1\;
#endif
#if !SharedLibXdmGreet
	@echo GREET_USER_STATIC=1\;
#endif
#if NeedVarargsPrototypes
	@echo NEED_VARARGS_PROTOTYPES=1\;
#endif
EOF
    if (xmkmf) > /dev/null 2> /dev/null && test -f Makefile; then
	rt=`${MAKE-make} acimake 2>/dev/null 2>/dev/null | grep -v make`
	eval `echo "$rt" | tr ^ \"`
	echo eval `echo "$rt" | tr ^ \"`
    else
	AC_MSG_ERROR(imake failed)
    fi
    cd ..
    rm -fr conftestdir
    AC_MSG_RESULT(done)
else
    AC_MSG_ERROR(cannot create temporary directory)
fi
AC_SUBST(CONN_FLAGS)
if test -n "$GREET_USER_STATIC"; then
    AC_DEFINE(GREET_USER_STATIC, 1, [Compile the greeter statically])
fi
if test -n "$HASXDMAUTH"; then
    AC_DEFINE(HASXDMAUTH, 1, [Use the different XDM authorization schemes])
fi
if test -n "$FRAGILE_DEV_MEM"; then
    AC_DEFINE(FRAGILE_DEV_MEM, 1, [Protect S3 cards from crashing])
fi
if test -n "$NEED_VARARGS_PROTOTYPES"; then
    AC_DEFINE(NeedVarargsPrototypes, 1, [Need function prototypes with VarArgs])
fi

AC_MSG_CHECKING([for xdm configuration dir])
if test "$ac_xdmdir" = "no"; then
    if test -n "$XDMDIR"; then
	ac_xdmdir=$XDMDIR
	dnl Check if Imake was right
	if test -f $ac_xdmdir/xdm-config; then
	    AC_MSG_RESULT($ac_xdmdir)
	else
	    dnl Here we must do something else
	    dnl Maybe look for xdm-config in standard places, and
	    dnl if that fails use a fresh copy in $KDEDIR/config/kdm/
	    AC_FIND_FILE(xdm-config,/etc/X11/xdm /var/X11/xdm /usr/openwin/xdm /usr/X11R6/lib/X11/xdm,ac_xdmdir)
	    if test -f $ac_xdmdir/xdm-config; then
                AC_MSG_RESULT($ac_xdmdir)
            else                                 
		if test "${prefix}" = NONE; then
			ac_xdmdir=$ac_default_prefix/config/kdm
		else
			ac_xdmdir=$prefix/config/kdm
		fi
		AC_MSG_RESULT([xdm config dir not found, installing defaults in $ac_xdmdir])
		xdmconfigsubdir=xdmconfig
		AC_SUBST(xdmconfigsubdir)
	    fi
	fi
    fi
else
    if test -f $ac_xdmdir/xdm-config; then
	AC_MSG_RESULT($ac_xdmdir)
    else

	AC_MSG_RESULT([xdm config dir not found, installing defaults in $ac_xdmdir])
	xdmconfigsubdir=xdmconfig
	AC_SUBST(xdmconfigsubdir)
    fi
fi
AC_DEFINE_UNQUOTED(XDMDIR,"$ac_xdmdir", [Define where to find the XDM configurations])
AC_SUBST(ac_xdmdir)

AC_PATH_PAM
if test "x$no_pam" = "xyes"; then 
	pam_support="no"
else
	pam_support="yes"
        shadow_support="no" # if pam is installed, use it. We can't savely 
	                    # test, if it works *sigh*
fi

if test "$pam_support" != "yes"; then
	AC_ARG_WITH(shadow,
		[  --with-shadow		  If you want shadow password support ],
		[ if test "$withval" = "yes"; then
	             shadow_support="yes"
	          else
	             shadow_support="no"
	          fi
		  if test "$pam_support" = "yes" && test "$shadow_support=yes"; then
			AC_MSG_WARN("You can not define both pam AND shadow")
		  fi
		],
		[ if test -z "$shadow_support"; then shadow_support="no"; fi ] )
fi

if test "$pam_support" = "yes"; then
  AC_CHECK_LIB(pam, main, [PASSWDLIB="-lpam -ldl"
  AC_DEFINE_UNQUOTED(HAVE_PAM_LIB, 1, [Define if you have the PAM lib. Now, we have two different users, this will change])],
  [],-ldl)
fi

if test -z "$PASSWDLIB" && test "$shadow_support" = "yes"; then
  AC_CHECK_LIB(shadow, main,
    [ PASSWDLIB="-lshadow"
      AC_DEFINE_UNQUOTED(HAVE_SHADOW_LIB, 1, [ define if you have shadow library])
    ])
fi
AC_SUBST(PASSWDLIB)

AC_MSG_CHECKING(whether to use Kerberos v4)
AC_ARG_WITH(krb4,
[  --with-krb4[=PATH]      Compile in Kerberos v4 support.],
[ case "$withval" in
  yes)
    with_krb4=/usr/kerberos
    ;;
  esac ],
[ with_krb4=no ]
)
case "$with_krb4" in
no)
  AC_MSG_RESULT(no)
  ;;
*)
  AC_MSG_RESULT(yes)
  AC_DEFINE_UNQUOTED(KRB4, 1, [ define if you have Kerberos IV ])
  KERBEROS_ROOT="$with_krb4"
  KERBEROS_INCS="-I${KERBEROS_ROOT}/include"
  KERBEROS_LIBS="-L${KERBEROS_ROOT}/lib -lkrb -ldes"
  KRB_RPATH=
  if test "$USE_RPATH" = "yes" ; then
    KRB_RPATH="-R ${KERBEROS_ROOT}/lib"
  fi
  AC_CHECK_LIB(resolv, dn_expand, KERBEROS_LIBS="$KERBEROS_LIBS -lresolv")
  dnl Check whether or not the AFS lifetime conversion routines exist.
  AC_MSG_CHECKING(whether AFS lifetime conversion routines are present)
  keeplibs="$LIBS"
  keepcflags="$CFLAGS"
  LIBS="-L${KERBEROS_ROOT}/lib -lkrb -ldes $LIBS"
  CFLAGS="-I${KERBEROS_ROOT}/include $CFLAGS"
  AC_TRY_LINK([#include <krb.h>], [ krb_life_to_time(10, 10);],
              [AC_MSG_RESULT(yes)
               AC_DEFINE_UNQUOTED(HAVE_KRB_LIFE_TO_TIME, 1, 
	         [ define if libkrb has krb_life_to_time() ])],
              [AC_MSG_RESULT(no)])
  LIBS="$keeplibs"
  CFLAGS="$keepcflags"
  ;;
esac

AC_MSG_CHECKING(whether to use AFS)
AC_ARG_WITH(afs,
[  --with-afs              Compile in AFS support (requires KTH krb4).],
if test "$with_afs" = no; then
      AC_MSG_RESULT(no)
    else
      AC_MSG_RESULT(yes)
  AC_DEFINE_UNQUOTED(AFS, 1, [ define if you have KTH Kerberos IV and AFS ])
  if test "$with_krb4" = no; then
    AC_MSG_RESULT(no)
    AC_MSG_WARN("AFS requires Kerberos v4 support.")
  else
    KERBEROS_LIBS="${KERBEROS_LIBS} -lkafs"
    if test -n "$os_aix"; then
      KERBEROS_LIBS="${KERBEROS_LIBS} -lld"
    fi
  fi
fi
)

AC_SUBST(KERBEROS_ROOT)dnl
AC_SUBST(KERBEROS_INCS)dnl
AC_SUBST(KERBEROS_LIBS)dnl
AC_SUBST(KRB_RPATH)

AC_REQUIRE([KDE_MISC_TESTS])
AC_CHECK_LIB(util, main, [LIBUTIL="-lutil"]) dnl for FreeBSD
AC_SUBST(LIBUTIL)
AC_CHECK_LIB(s, main, [LIB_LIBS="-ls"]) dnl for AIX
AC_SUBST(LIB_LIBS)
AC_CHECK_LIB(Xdmcp, main, [LIBXDMCP="-lXdmcp"], , $X_LDFLAGS -lX11 $LIBSOCKET) dnl for Unixware
AC_SUBST(LIBXDMCP)

AC_CHECK_HEADERS(sys/sockio.h sys/stropts.h sys/socket.h sys/stream.h libutil.h util.h)

if test -n "$LIBXDMCP"; then
  ac_cpp_safe=$ac_cpp
  ac_cpp='$CXXCPP $CPPFLAGS $X_INCLUDES'

  AC_CHECK_HEADERS(X11/Xdmcp.h, [KDM_CHOOSER_DIR=chooser], AC_MSG_ERROR([KDM currently does not build without XDMCP. Please install Xdmcp.h]))
  AC_SUBST(KDM_CHOOSER_DIR)
  ac_cpp=$ac_cpp_safe
fi

dnl AC_OUTPUT(kdm/config/kdmrc)

