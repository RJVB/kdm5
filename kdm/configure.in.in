
dnl this is for kdm:

AC_REQUIRE([AC_PATH_KDE])
KDE_CONFDIR=`eval echo $kde_confdir`
AC_DEFINE_UNQUOTED(KDE_CONFDIR, "$KDE_CONFDIR", [Define where to look for kde config files])

AC_CHECK_FUNCS(getsecretkey getloadavg getusershell)

dnl checks for X server
AC_PATH_PROG(X_SERVER, X)
if test ! -z "$X_SERVER"; then
    X_SERVER=`echo $X_SERVER | sed -e 's#/X$##'`
    AC_DEFINE_UNQUOTED(XBINDIR, $X_SERVER, [Define where to find the X server])
    XBINDIR=$X_SERVER
fi
AC_SUBST(XBINDIR)

dnl ask imake about various X settings
AC_MSG_CHECKING([various X settings])
rm -fr conftestdir
if mkdir conftestdir; then
    cd conftestdir
    cat > Imakefile <<'EOF'
acimake:
	@echo XDMDIR="$(XDMDIR)"\;
	@echo CONN_FLAGS=^ConnectionFlags^\;
	@echo STD_DEFINES=^StandardDefines^\;
#if HasXdmAuth
	@echo HASXDMAUTH=1\;
#endif
#if defined(i386Architecture) || defined(AmigaArchitecture)
	@echo FRAGILE_DEV_MEM=1\;
#endif
#ifndef SharedLibXdmGreet
# define SharedLibXdmGreet YES
#endif
#if !SharedLibXdmGreet
	@echo GREET_USER_STATIC=1\;
#endif
#if NeedVarargsPrototypes
	@echo NEED_VARARGS_PROTOTYPES=1\;
#endif
EOF
    xmkmf > /dev/null 2> /dev/null 
    if test -f Makefile; then
	eval `${MAKE-make} acimake 2> /dev/null | grep -v make | tr ^ \"`
    else
	AC_MSG_ERROR([xmkmf (imake) failed])
    fi
    cd ..
    rm -fr conftestdir
    AC_MSG_RESULT([done])
else
    AC_MSG_ERROR([cannot create temporary directory])
fi

AC_MSG_CHECKING([which xdm connection flags to use])
AC_MSG_RESULT([$CONN_FLAGS])
AC_SUBST(CONN_FLAGS)

AC_MSG_CHECKING([for additional xdm defines])
AC_MSG_RESULT([$STD_DEFINES])
AC_SUBST(STD_DEFINES)

AC_MSG_CHECKING([whether to build a shared greeter for xdm])
AC_ARG_ENABLE(greet-lib,
	[  --disable-greet-lib     build static kdm greeter [default=auto,dynamic]],
	[ if test "$enableval" = yes; then
	    GREET_USER_STATIC=
	  else
	    GREET_USER_STATIC=1
	  fi
	])
if test -n "$GREET_USER_STATIC"; then
    AC_MSG_RESULT([no])
    AC_DEFINE(GREET_USER_STATIC, 1, [Link the greeter statically])
    kdmgreetera=libKdmGreet.a
    KDM_GREET_LIBS="greeter/$kdmgreetera \$(KDM_KDE_LIBS)"
else
    kdmgreeterla=libKdmGreet.la
    AC_MSG_RESULT([yes])
fi
AC_SUBST(KDM_GREET_LIBS)
AC_SUBST(kdmgreetera)
AC_SUBST(kdmgreeterla)

AC_MSG_CHECKING([whether to use xdm authorization])
if test -n "$HASXDMAUTH"; then
    AC_MSG_RESULT([yes])
    AC_DEFINE(HASXDMAUTH, 1, [Use the different XDM authorization schemes])
else
    AC_MSG_RESULT([no])
fi

AC_MSG_CHECKING([whether the system is CSRG based])
if test -n "$CSRG_BASED"; then
    AC_MSG_RESULT([yes])
    AC_DEFINE(CSRG_BASED, 1, [The system is CSRG based (4.4 BSD + clones)])
else
    AC_MSG_RESULT([no])
fi

AC_MSG_CHECKING([whether to prevent access to video RAM])
if test -n "$FRAGILE_DEV_MEM"; then
    AC_MSG_RESULT([yes])
    AC_DEFINE(FRAGILE_DEV_MEM, 1, [Protect S3 cards from crashing])
else
    AC_MSG_RESULT([no])
fi

AC_MSG_CHECKING([whether function prototypes with Varargs are required])
if test -n "$NEED_VARARGS_PROTOTYPES"; then
    AC_MSG_RESULT([yes])
    AC_DEFINE(NeedVarargsPrototypes, 1, [Need function prototypes with Varargs])
else
    AC_MSG_RESULT([no])
fi

dnl This one tries to find XDMDIR for config files
AC_ARG_WITH(xdmdir,
	[  --with-xdmdir[=PATH]    If the xdm config dir cannot be found automatically],
	[ ac_xdmdir=$withval],
	[ ac_xdmdir="no"])
AC_MSG_CHECKING([for xdm config directory])
if test "$ac_xdmdir" = "no"; then
    ac_xdmdir=$KDE_CONFDIR/kdm
    dnl should /var/X11/xdm go before $XDMDIR?
    for i in /etc/X11/kdm /etc/X11/xdm $XDMDIR /var/X11/xdm /usr/openwin/xdm /usr/X11R6/lib/X11/xdm; do
	if test -d $i; then
	    ac_xdmdir=$i
	    break 2
	fi
    done
fi
XDMDIR=$ac_xdmdir
AC_MSG_RESULT([$XDMDIR])
AC_SUBST(XDMDIR)
AC_DEFINE_UNQUOTED(XDMDIR, "$XDMDIR", [Define where to find the XDM configuration])

AC_PATH_PAM
if test "x$no_pam" = "xyes"; then 
	pam_support="no"
else
	pam_support="yes"
        shadow_support="no" # if pam is installed, use it. We can't savely 
	                    # test, if it works *sigh*
fi


if test "$pam_support" != "yes"; then
	AC_ARG_WITH(shadow,
		[  --with-shadow		  If you want shadow password support ],
		[ if test "$withval" = "yes"; then
	             shadow_support="yes"
	          else
	             shadow_support="no"
	          fi
		  if test "$pam_support" = "yes" && test "$shadow_support=yes"; then
			AC_MSG_WARN("You can not define both pam AND shadow")
		  fi
		],
		[ if test -z "$shadow_support"; then shadow_support="no"; fi ] )
fi

if test "$pam_support" = "yes"; then
  AC_CHECK_LIB(pam, main, [PASSWDLIB="-lpam -ldl"
  AC_DEFINE_UNQUOTED(HAVE_PAM_LIB, 1, [Define if you have the PAM lib. Now, we have two different users, this will change])],
  [],-ldl)
fi

if test -z "$PASSWDLIB" && test "$shadow_support" = "yes"; then
  AC_CHECK_LIB(shadow, main,
    [ PASSWDLIB="-lshadow"
      AC_DEFINE_UNQUOTED(HAVE_SHADOW_LIB, 1, [ define if you have shadow library])
    ])
fi
AC_SUBST(PASSWDLIB)

AC_MSG_CHECKING(whether to use Kerberos v4)
AC_ARG_WITH(krb4,
[  --with-krb4[=PATH]      Compile in Kerberos v4 support.],
[ case "$withval" in
  yes)
    with_krb4=/usr/kerberos
    ;;
  esac ],
[ with_krb4=no ]
)
case "$with_krb4" in
no)
  AC_MSG_RESULT(no)
  ;;
*)
  AC_MSG_RESULT(yes)
  AC_DEFINE_UNQUOTED(KRB4, 1, [ define if you have Kerberos IV ])
  KERBEROS_ROOT="$with_krb4"
  KERBEROS_INCS="-I${KERBEROS_ROOT}/include"
  KERBEROS_LIBS="-L${KERBEROS_ROOT}/lib -lkrb -ldes"
  KRB_RPATH=
  if test "$USE_RPATH" = "yes" ; then
    KRB_RPATH="-R ${KERBEROS_ROOT}/lib"
  fi
  AC_CHECK_LIB(resolv, dn_expand, KERBEROS_LIBS="$KERBEROS_LIBS -lresolv")
  dnl Check whether or not the AFS lifetime conversion routines exist.
  AC_MSG_CHECKING(whether AFS lifetime conversion routines are present)
  keeplibs="$LIBS"
  keepcflags="$CFLAGS"
  LIBS="-L${KERBEROS_ROOT}/lib -lkrb -ldes $LIBS"
  CFLAGS="-I${KERBEROS_ROOT}/include $CFLAGS"
  AC_TRY_LINK([#include <krb.h>], [ krb_life_to_time(10, 10);],
              [AC_MSG_RESULT(yes)
               AC_DEFINE_UNQUOTED(HAVE_KRB_LIFE_TO_TIME, 1, 
	         [ define if libkrb has krb_life_to_time() ])],
              [AC_MSG_RESULT(no)])
  LIBS="$keeplibs"
  CFLAGS="$keepcflags"
  ;;
esac

AC_MSG_CHECKING(whether to use AFS)
AC_ARG_WITH(afs,
  [  --with-afs              Compile in AFS support (requires KTH krb4).], , 
  [ with_afs=no ])
if test "$with_afs" = no; then
  AC_MSG_RESULT(no)
else
  if test "$with_krb4" = no; then
    AC_MSG_RESULT(no)
    AC_MSG_WARN("AFS requires Kerberos v4 support.")
  else
    AC_MSG_RESULT(yes)
    AC_DEFINE_UNQUOTED(AFS, 1, [ define if you have KTH Kerberos IV and AFS ])
    KERBEROS_LIBS="${KERBEROS_LIBS} -lkafs"
    if test -n "$os_aix"; then
      KERBEROS_LIBS="${KERBEROS_LIBS} -lld"
    fi
  fi
fi


AC_SUBST(KERBEROS_ROOT)dnl
AC_SUBST(KERBEROS_INCS)dnl
AC_SUBST(KERBEROS_LIBS)dnl
AC_SUBST(KRB_RPATH)

AC_REQUIRE([KDE_MISC_TESTS])
AC_CHECK_LIB(util, main, [LIBUTIL="-lutil"]) dnl for FreeBSD
AC_SUBST(LIBUTIL)
AC_CHECK_LIB(s, main, [LIB_LIBS="-ls"]) dnl for AIX
AC_SUBST(LIB_LIBS)

AC_CHECK_HEADERS(sys/sockio.h sys/stropts.h sys/socket.h sys/stream.h libutil.h util.h)

AC_ARG_WITH(xdmcp,
	[  --without-xdmcp         build kdm without xdmcp support [default=with xdmcp]],
	[ if test "$withval" = yes; then
	    XDMCP=1
	  else
	    XDMCP=
	  fi
	], [XDMCP=1])
if test -n "$XDMCP"; then
  kdmchooserdir=chooser
  AC_CHECK_LIB(Xdmcp, main, [LIBXDMCP="-lXdmcp"], , $X_LDFLAGS -lX11 $LIBSOCKET)
  if test -n "$LIBXDMCP"; then
    ac_cpp_safe=$ac_cpp
    ac_cpp='$CXXCPP $CPPFLAGS $X_INCLUDES'
    AC_CHECK_HEADER(X11/Xdmcp.h, [HAVE_X11_XDMCP_H=1])
    ac_cpp=$ac_cpp_safe
  fi
  if test -z "$HAVE_X11_XDMCP_H"; then
    AC_MSG_ERROR([Cannot build KDM! Make sure that libXdmcp.a and Xdmcp.h 
are installed or use --without-xdmcp to disable XDMCP support!])
  fi
  AC_DEFINE(XDMCP, 1, [ build KDM with XDMCP support ])
fi
AC_SUBST(LIBXDMCP)
AC_SUBST(kdmchooserdir)

dnl AC_OUTPUT(kdm/xdmconfig/xdm-config)
dnl AC_OUTPUT(kdm/xdmconfig/Xservers)
